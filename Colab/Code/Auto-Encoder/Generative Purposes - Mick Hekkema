{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Generative Purposes - Mick Hekkema","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["import numpy as np\n","import tensorflow as tf\n","# from datetime import datetime\n","import matplotlib.pyplot as plt\n","import h5py\n","import keras\n","from keras import Model\n","from tensorflow.keras.layers import Input, Dense, Conv2D, MaxPool2D, AveragePooling2D, UpSampling2D, concatenate, BatchNormalization, Conv2DTranspose, Flatten, Reshape, AveragePooling2D, Lambda\n","from tensorflow.keras.optimizers import Adam "],"metadata":{"id":"ujg0ps19Jp9K"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vkEHj3NrJaRR"},"outputs":[],"source":["original_dim = 24 * 24\n","intermediate_dim = 64\n","latent_dim = 8\n","\n","inputs = Input(shape=(original_dim,))\n","h = Dense(intermediate_dim, activation='relu')(inputs)\n","z_mean = Dense(latent_dim)(h)\n","z_log_sigma = Dense(latent_dim)(h)"]},{"cell_type":"code","source":["from keras import backend as K, Model\n","\n","def sampling(args):\n","    z_mean, z_log_sigma = args\n","    epsilon = K.random_normal(shape=(K.shape(z_mean)[0], latent_dim),\n","                              mean=0., stddev=0.1)\n","    return z_mean + K.exp(z_log_sigma) * epsilon\n","\n","z = Lambda(sampling)([z_mean, z_log_sigma])"],"metadata":{"id":"gmDABemOJcmh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["encoder = Model(inputs, [z_mean, z_log_sigma, z], name='encoder')\n","\n","# Create decoder\n","latent_inputs = Input(shape=(latent_dim,), name='z_sampling')\n","x = Dense(intermediate_dim, activation='relu')(latent_inputs)\n","outputs = Dense(original_dim, activation='sigmoid')(x)\n","decoder = Model(latent_inputs, outputs, name='decoder')\n","\n","# instantiate VAE model\n","outputs = decoder(encoder(inputs)[2])\n","vae = Model(inputs, outputs, name='vae_mlp')"],"metadata":{"id":"FzFtQ66jJcwq","executionInfo":{"status":"error","timestamp":1642773488359,"user_tz":-60,"elapsed":10,"user":{"displayName":"Tobias Evers","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14673044864301072706"}},"colab":{"base_uri":"https://localhost:8080/","height":235},"outputId":"a49e65e7-5c9d-478c-b73e-5abff1d2c374"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-b89fda1132fe>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mencoder\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mz_mean\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mz_log_sigma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mz\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'encoder'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Create decoder\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mlatent_inputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mInput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlatent_dim\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'z_sampling'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDense\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintermediate_dim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'relu'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlatent_inputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'z' is not defined"]}]},{"cell_type":"markdown","source":[""],"metadata":{"id":"XSKUHJ_9LfXz"}},{"cell_type":"code","source":["reconstruction_loss = keras.losses.binary_crossentropy(inputs, outputs)\n","reconstruction_loss *= original_dim\n","kl_loss = 1 + z_log_sigma - K.square(z_mean) - K.exp(z_log_sigma)\n","kl_loss = K.sum(kl_loss, axis=-1)\n","kl_loss *= -0.5\n","vae_loss = K.mean(reconstruction_loss + kl_loss)\n","vae.add_loss(vae_loss)\n","vae.compile(optimizer='adam')"],"metadata":{"id":"KgdLkESHJc3N"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["hf = h5py.File('ML_WORKSHOP_Kolmogorov_Re20_T1000_DT01.h5','r')\n","Nx = 24\n","Nu = 1\n","t = np.array(hf.get('t'))\n","u_all = np.zeros((Nx,Nx,len(t),Nu))\n","u_all[:,:,:,0] = np.array(hf.get('u_refined'))\n","# u_all[:,:,:,1] = np.array(hf.get('v_refined'))\n","u_all = np.transpose(u_all,[2,0,1,3])\n","hf.close()\n","print(u_all.shape)\n","\n","# normalize data\n","u_min = np.amin(u_all[:,:,:,0])\n","u_max = np.amax(u_all[:,:,:,0])\n","u_all[:,:,:,0] = (u_all[:,:,:,0] - u_min) / (u_max - u_min)\n","if Nu==2:\n","    v_min = np.amin(u_all[:,:,:,1])\n","    v_max = np.amax(u_all[:,:,:,1])\n","    u_all[:,:,:,1] = (u_all[:,:,:,1] - v_min) / (v_max - v_min)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CxUkXQTOKlb_","executionInfo":{"status":"ok","timestamp":1642760976886,"user_tz":-60,"elapsed":227,"user":{"displayName":"Tobias Evers","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14673044864301072706"}},"outputId":"6e8ca7ce-94b2-4a4c-99a3-c81bb5b58126"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1000, 24, 24, 1)\n"]}]},{"cell_type":"code","source":["# visualization of the dataset\n","%matplotlib inline\n","fig = plt.figure()\n","ax = fig.add_subplot(121)\n","ax.contourf(u_all[1,:,:,0])\n","# ax2 = fig.add_subplot(122)\n","# ax2.contourf(u_all[0,:,:,1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"6HHBdrnNJc9p","executionInfo":{"status":"ok","timestamp":1642760980543,"user_tz":-60,"elapsed":541,"user":{"displayName":"Tobias Evers","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14673044864301072706"}},"outputId":"310ab7f6-35fa-4c19-942a-29a82a615d10"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.contour.QuadContourSet at 0x7fd9ebd10a10>"]},"metadata":{},"execution_count":27},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["val_ratio = int(np.round(0.75*len(u_all)))\n","test_ratio = int(np.round(0.95*len(u_all)))\n","\n","u_train = u_all[:val_ratio,:,:,:].astype('float32')\n","u_val = u_all[val_ratio:test_ratio,:,:,:].astype('float32')\n","u_test = u_all[test_ratio:,:,:,:].astype('float32')\n","#del u_all\n","u_train = u_train.astype('float32') / 255.\n","u_test = u_test.astype('float32') / 255.\n","u_train = u_train.reshape((len(u_train), np.prod(u_train.shape[1:])))\n","u_test = u_test.reshape((len(u_test), np.prod(u_test.shape[1:])))\n"],"metadata":{"id":"SJqnpFA7JdHm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["nb_epochs = 1000\n","batch_size = 20\n","hist = vae.fit(u_train, u_train, epochs=nb_epochs, batch_size=batch_size,\n","                shuffle=True,validation_data=(u_test, u_test),\n","                       verbose=1,\n","                       callbacks=[model_checkpoint_callback,early_stop_callback])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"ni9mJZNzLQy1","executionInfo":{"status":"error","timestamp":1642761645531,"user_tz":-60,"elapsed":210,"user":{"displayName":"Tobias Evers","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14673044864301072706"}},"outputId":"5a20c1ad-a642-4c66-a26a-e012fb27918c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/1000\n"]},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-64-555fcbecf423>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m                 \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mu_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mu_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m                        \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m                        callbacks=[model_checkpoint_callback,early_stop_callback])\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    940\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    941\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 942\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    943\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    944\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'NoneType' object is not callable"]}]},{"cell_type":"code","source":["x_test_encoded = encoder.predict(u_test, batch_size=batch_size)\n","plt.figure(figsize=(6, 6))\n","plt.scatter(x_test_encoded[:, 0], x_test_encoded[:, 1], c=y_test)\n","plt.colorbar()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":252},"id":"1k9Koh27OZY5","executionInfo":{"status":"error","timestamp":1642761682021,"user_tz":-60,"elapsed":200,"user":{"displayName":"Tobias Evers","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14673044864301072706"}},"outputId":"32d4d8ee-8538-4d5a-c1fa-5c571175d2bc"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-66-5f6c6228d1de>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mx_test_encoded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mencoder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mu_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test_encoded\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_test_encoded\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolorbar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: list indices must be integers or slices, not tuple"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x432 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["n = 15  # figure with 15x15 digits\n","digit_size = 28\n","figure = np.zeros((digit_size * n, digit_size * n))\n","# We will sample n points within [-15, 15] standard deviations\n","grid_x = np.linspace(-15, 15, n)\n","grid_y = np.linspace(-15, 15, n)\n","\n","for i, yi in enumerate(grid_x):\n","    for j, xi in enumerate(grid_y):\n","        z_sample = np.array([[xi, yi]])\n","        x_decoded = decoder.predict(z_sample)\n","        digit = x_decoded[0].reshape(digit_size, digit_size)\n","        figure[i * digit_size: (i + 1) * digit_size,\n","               j * digit_size: (j + 1) * digit_size] = digit\n","\n","plt.figure(figsize=(10, 10))\n","plt.imshow(figure)\n","plt.show()"],"metadata":{"id":"ZOyg900zObCp"},"execution_count":null,"outputs":[]}]}