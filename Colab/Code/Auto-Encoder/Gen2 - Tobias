{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Gen2 - Tobias","provenance":[],"authorship_tag":"ABX9TyOitoyuyCm1AxM7Mtv85HaV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":98,"metadata":{"id":"vqdH9ZIwCO-c","executionInfo":{"status":"ok","timestamp":1642777151766,"user_tz":-60,"elapsed":211,"user":{"displayName":"Tobias Evers","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14673044864301072706"}}},"outputs":[],"source":["import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","import h5py\n","from tensorflow.keras.layers import Input, Dense, Conv2D, MaxPool2D, AveragePooling2D, UpSampling2D, concatenate, BatchNormalization, Conv2DTranspose, Flatten, Reshape, AveragePooling2D\n","from tensorflow.keras.optimizers import Adam "]},{"cell_type":"code","source":["class Sampling(layers.Layer):\n","    \"\"\"Uses (z_mean, z_log_var) to sample z, the vector encoding a digit.\"\"\"\n","\n","    def call(self, inputs):\n","        z_mean, z_log_var = inputs\n","        batch = tf.shape(z_mean)[0]\n","        dim = tf.shape(z_mean)[1]\n","        epsilon = tf.keras.backend.random_normal(shape=(batch, dim))\n","        return z_mean + tf.exp(0.5 * z_log_var) * epsilon"],"metadata":{"id":"Kvvf_hS9CTXs","executionInfo":{"status":"ok","timestamp":1642777152650,"user_tz":-60,"elapsed":4,"user":{"displayName":"Tobias Evers","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14673044864301072706"}}},"execution_count":99,"outputs":[]},{"cell_type":"code","source":["latent_dim = 2\n","\n","encoder_inputs = keras.Input(shape=(24, 24, 1))\n","x = layers.Conv2D(32, 3, activation=\"tanh\", strides=2, padding=\"same\")(encoder_inputs)\n","x = layers.Conv2D(64, 3, activation=\"tanh\", strides=2, padding=\"same\")(x)\n","x = layers.Flatten()(x)\n","x = layers.Dense(16, activation=\"tanh\")(x)\n","z_mean = layers.Dense(latent_dim, name=\"z_mean\")(x)\n","z_log_var = layers.Dense(latent_dim, name=\"z_log_var\")(x)\n","z = Sampling()([z_mean, z_log_var])\n","encoder = keras.Model(encoder_inputs, [z_mean, z_log_var, z], name=\"encoder\")\n","encoder.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J6wGu0D-CTe6","executionInfo":{"status":"ok","timestamp":1642777153878,"user_tz":-60,"elapsed":8,"user":{"displayName":"Tobias Evers","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14673044864301072706"}},"outputId":"552e745c-101f-400f-cfb5-2f982845875e"},"execution_count":100,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"encoder\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_29 (InputLayer)          [(None, 24, 24, 1)]  0           []                               \n","                                                                                                  \n"," conv2d_21 (Conv2D)             (None, 12, 12, 32)   320         ['input_29[0][0]']               \n","                                                                                                  \n"," conv2d_22 (Conv2D)             (None, 6, 6, 64)     18496       ['conv2d_21[0][0]']              \n","                                                                                                  \n"," flatten_8 (Flatten)            (None, 2304)         0           ['conv2d_22[0][0]']              \n","                                                                                                  \n"," dense_24 (Dense)               (None, 16)           36880       ['flatten_8[0][0]']              \n","                                                                                                  \n"," z_mean (Dense)                 (None, 2)            34          ['dense_24[0][0]']               \n","                                                                                                  \n"," z_log_var (Dense)              (None, 2)            34          ['dense_24[0][0]']               \n","                                                                                                  \n"," sampling_9 (Sampling)          (None, 2)            0           ['z_mean[0][0]',                 \n","                                                                  'z_log_var[0][0]']              \n","                                                                                                  \n","==================================================================================================\n","Total params: 55,764\n","Trainable params: 55,764\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["latent_inputs = keras.Input(shape=(latent_dim,))\n","x = layers.Dense(8 * 8 * 64, activation=\"tanh\")(latent_inputs)\n","x = layers.Reshape((8, 8, 64))(x)\n","x = layers.Conv2DTranspose(32, 3, activation=\"tanh\", strides=3, padding=\"same\")(x)\n","#x = layers.Conv2DTranspose(32, 3, activation=\"tanh\", strides=2, padding=\"same\")(x)\n","decoder_outputs = layers.Conv2DTranspose(1, 3, activation=\"sigmoid\", padding=\"same\")(x)\n","decoder = keras.Model(latent_inputs, decoder_outputs, name=\"decoder\")\n","decoder.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JdLf6mcyCThd","executionInfo":{"status":"ok","timestamp":1642777156083,"user_tz":-60,"elapsed":322,"user":{"displayName":"Tobias Evers","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14673044864301072706"}},"outputId":"85b3e666-bd6e-4271-c4f7-f477d94fa807"},"execution_count":101,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"decoder\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_30 (InputLayer)       [(None, 2)]               0         \n","                                                                 \n"," dense_25 (Dense)            (None, 4096)              12288     \n","                                                                 \n"," reshape_16 (Reshape)        (None, 8, 8, 64)          0         \n","                                                                 \n"," conv2d_transpose_39 (Conv2D  (None, 24, 24, 32)       18464     \n"," Transpose)                                                      \n","                                                                 \n"," conv2d_transpose_40 (Conv2D  (None, 24, 24, 1)        289       \n"," Transpose)                                                      \n","                                                                 \n","=================================================================\n","Total params: 31,041\n","Trainable params: 31,041\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["class VAE(keras.Model):\n","    def __init__(self, encoder, decoder, **kwargs):\n","        super(VAE, self).__init__(**kwargs)\n","        self.encoder = encoder\n","        self.decoder = decoder\n","        self.total_loss_tracker = keras.metrics.Mean(name=\"total_loss\")\n","        self.reconstruction_loss_tracker = keras.metrics.Mean(\n","            name=\"reconstruction_loss\"\n","        )\n","        self.kl_loss_tracker = keras.metrics.Mean(name=\"kl_loss\")\n","\n","    @property\n","    def metrics(self):\n","        return [\n","            self.total_loss_tracker,\n","            self.reconstruction_loss_tracker,\n","            self.kl_loss_tracker,\n","        ]\n","\n","    def train_step(self, data):\n","        with tf.GradientTape() as tape:\n","            z_mean, z_log_var, z = self.encoder(data)\n","            reconstruction = self.decoder(z)\n","            reconstruction_loss = tf.reduce_mean(\n","                tf.reduce_sum(\n","                    keras.losses.binary_crossentropy(data, reconstruction), axis=(1, 2)\n","                )\n","            )\n","            kl_loss = -0.5 * (1 + z_log_var - tf.square(z_mean) - tf.exp(z_log_var))\n","            kl_loss = tf.reduce_mean(tf.reduce_sum(kl_loss, axis=1))\n","            total_loss = reconstruction_loss + kl_loss\n","        grads = tape.gradient(total_loss, self.trainable_weights)\n","        self.optimizer.apply_gradients(zip(grads, self.trainable_weights))\n","        self.total_loss_tracker.update_state(total_loss)\n","        self.reconstruction_loss_tracker.update_state(reconstruction_loss)\n","        self.kl_loss_tracker.update_state(kl_loss)\n","        return {\n","            \"loss\": self.total_loss_tracker.result(),\n","            \"reconstruction_loss\": self.reconstruction_loss_tracker.result(),\n","            \"kl_loss\": self.kl_loss_tracker.result(),\n","        }"],"metadata":{"id":"LRdG4iwnCTkA","executionInfo":{"status":"ok","timestamp":1642777157659,"user_tz":-60,"elapsed":220,"user":{"displayName":"Tobias Evers","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14673044864301072706"}}},"execution_count":102,"outputs":[]},{"cell_type":"code","source":["hf = h5py.File('ML_WORKSHOP_Kolmogorov_Re20_T1000_DT01.h5','r')\n","Nx = 24\n","Nu = 1\n","t = np.array(hf.get('t'))\n","u_all = np.zeros((Nx,Nx,len(t),Nu))\n","u_all[:,:,:,0] = np.array(hf.get('u_refined'))\n","# u_all[:,:,:,1] = np.array(hf.get('v_refined'))\n","u_all = np.transpose(u_all,[2,0,1,3])\n","hf.close()\n","print(u_all.shape)\n","\n","# normalize data\n","u_min = np.amin(u_all[:,:,:,0])\n","u_max = np.amax(u_all[:,:,:,0])\n","u_all[:,:,:,0] = (u_all[:,:,:,0] - u_min) / (u_max - u_min)\n","if Nu==2:\n","    v_min = np.amin(u_all[:,:,:,1])\n","    v_max = np.amax(u_all[:,:,:,1])\n","    u_all[:,:,:,1] = (u_all[:,:,:,1] - v_min) / (v_max - v_min)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SW2MChBoDd_n","executionInfo":{"status":"ok","timestamp":1642777159635,"user_tz":-60,"elapsed":206,"user":{"displayName":"Tobias Evers","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14673044864301072706"}},"outputId":"119d4667-43b3-4c29-d76e-0eedaefc6003"},"execution_count":103,"outputs":[{"output_type":"stream","name":"stdout","text":["(1000, 24, 24, 1)\n"]}]},{"cell_type":"code","source":["val_ratio = int(np.round(0.75*len(u_all)))\n","test_ratio = int(np.round(0.95*len(u_all)))\n","\n","x_train = u_all[:val_ratio,:,:,:].astype('float32')\n","x_val = u_all[val_ratio:test_ratio,:,:].astype('float32')\n","x_test = u_all[test_ratio:,:,:].astype('float32')\n","#del u_all\n","x_train = np.reshape(x_train, (750,24,24))\n","x_test = np.reshape(x_test, (50,24,24))\n","print(x_train.shape, x_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AE1phBR4Deka","executionInfo":{"status":"ok","timestamp":1642777161200,"user_tz":-60,"elapsed":235,"user":{"displayName":"Tobias Evers","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14673044864301072706"}},"outputId":"2348f56e-adca-414f-cf90-c101cacb1603"},"execution_count":104,"outputs":[{"output_type":"stream","name":"stdout","text":["(750, 24, 24) (50, 24, 24)\n"]}]},{"cell_type":"code","source":["\n","mnist_digits = np.concatenate([x_train, x_test], axis=0)\n","#mnist_digits = np.expand_dims(mnist_digits, -1).astype(\"float32\") / 255\n","\n","\n","vae = VAE(encoder, decoder)\n","vae.compile(optimizer=keras.optimizers.Adam())\n","vae.fit(mnist_digits, epochs=100, batch_size=128)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":623},"id":"9jYQrovKCTmc","executionInfo":{"status":"error","timestamp":1642777163161,"user_tz":-60,"elapsed":209,"user":{"displayName":"Tobias Evers","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14673044864301072706"}},"outputId":"474b3f30-9f9b-432f-94c0-c518ce7364ce"},"execution_count":105,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-105-cdb73d97a709>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mvae\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mVAE\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mencoder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdecoder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mvae\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptimizers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAdam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mvae\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmnist_digits\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m128\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/func_graph.py\u001b[0m in \u001b[0;36mautograph_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1127\u001b[0m           \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint:disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1128\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"ag_error_metadata\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1129\u001b[0;31m               \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mag_error_metadata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1130\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1131\u001b[0m               \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 878, in train_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 867, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 860, in run_step  **\n        outputs = model.train_step(data)\n    File \"<ipython-input-102-373258cf77cd>\", line 26, in train_step\n        keras.losses.binary_crossentropy(data, reconstruction), axis=(1, 2)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/losses.py\", line 1807, in binary_crossentropy\n        backend.binary_crossentropy(y_true, y_pred, from_logits=from_logits),\n    File \"/usr/local/lib/python3.7/dist-packages/keras/backend.py\", line 5158, in binary_crossentropy\n        return tf.nn.sigmoid_cross_entropy_with_logits(labels=target, logits=output)\n\n    ValueError: `logits` and `labels` must have the same shape, received ((None, 24, 24, 1) vs (None, 24, 24)).\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","\n","def plot_latent_space(vae, n=2, figsize=15):\n","    # display a n*n 2D manifold of digits\n","    digit_size = 24\n","    scale = 1.0\n","    figure = np.zeros((digit_size * n, digit_size * n))\n","    # linearly spaced coordinates corresponding to the 2D plot\n","    # of digit classes in the latent space\n","    grid_x = np.linspace(-scale, scale, n)\n","    grid_y = np.linspace(-scale, scale, n)[::-1]\n","\n","    for i, yi in enumerate(grid_y):\n","        for j, xi in enumerate(grid_x):\n","            z_sample = np.array([[xi, yi]])\n","            x_decoded = vae.decoder.predict(z_sample)\n","            digit = x_decoded[0].reshape(digit_size, digit_size)\n","            figure[\n","                i * digit_size : (i + 1) * digit_size,\n","                j * digit_size : (j + 1) * digit_size,\n","            ] = digit\n","\n","    plt.figure(figsize=(figsize, figsize))\n","    start_range = digit_size // 2\n","    end_range = n * digit_size + start_range\n","    pixel_range = np.arange(start_range, end_range, digit_size)\n","    sample_range_x = np.round(grid_x, 1)\n","    sample_range_y = np.round(grid_y, 1)\n","    plt.xticks(pixel_range, sample_range_x)\n","    plt.yticks(pixel_range, sample_range_y)\n","    plt.xlabel(\"z[0]\")\n","    plt.ylabel(\"z[1]\")\n","    plt.imshow(figure, cmap=\"Greys_r\")\n","    plt.show()\n","\n","\n","plot_latent_space(vae)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"id":"mORKgnGOCTpF","executionInfo":{"status":"ok","timestamp":1642776921759,"user_tz":-60,"elapsed":540,"user":{"displayName":"Tobias Evers","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14673044864301072706"}},"outputId":"861d6a72-b12a-4667-8566-fdcc91a2e9f3"},"execution_count":83,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAA2YAAANcCAYAAAA0NLw1AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3dXYyk2Vkf8HOqqru6Z3pm12s7WnsXyAavbAWjILAjuEPkgo8buOAiSAiHQKwIIy6QE3KB4BqBQmIF4SAF2b4IAZELQHJuUCyhSBDYEAtbQkLrRJb3Yzxe7+zMbs90d1W9JxfbTnY2ng/8nO7nbPXvJ43k/ti/n/Oet97qf709NbW1VgAAAMgzyx4AAADgolPMAAAAkilmAAAAyRQzAACAZIoZAABAskX2AFG7u7ttf38/lHF4eNhpmpjZLN6Te2R4p87+aq3hjG3al1HW0mNfRtHjsT9N0xAZPSyXy3DG7du3wxmjnOsA9BH92aG1VlprXzfkLV/M9vf3y/d8z/eEMv78z/88PEePH/B6/CBxcHAQzjg5OQln9DCfz8MZm80mnNFjb3d3d8MZPfalxw+JPQrAer0OZ/SwWMQvgT3OsR7neo/rx507d8IZx8fH4Ywe5e4973lPOOMv//IvwxlHR0fhjB688NffKGvZpheYGFOPc6zHdX2Ux1z0Z4f7/QzkVxkBAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASFZba9kzhCwWi/bII4+EMm7evBmeo9YazpjN4j15Z2cnnDFNUzijhx7HdJTzu8febtO+jLKWHvvS4xzrcUzn83k4Y71eD5HRw9ve9rZwxvXr1ztMAsA2iT5nt9ZKa+3rhrhjBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACDZInuAHmqtqf99L7OZntxbay2cMcr5sU0c0/56nOs99NjbHmuZpimcAQDnSRMAAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkGyRPUBUrbXM5/NwxrbosZYeGa21IeaYzcZ47cG+9J+D7dXjHNvd3R1iDuc6AA9rjJ9aAQAALjDFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBki+wBomqtZWdnJ5wxgtks3pN7rGWU4zGKUY7pKPtiLXdrrXWYZAw9jkeP61gPo5xjAPCwxngGBQAAuMAUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSLbIHGMFsFu+n0zR1mATOVq01e4St0+OYjpKxTVpr2SMAwN+KO2YAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAki2yB4iqtZblchnKmM3i/bRHRq11iDlaa0NkbJNR9qWH+XyePUIppc/x6PGY65HRQ49zbJqmcEaP49FjbxeLt/zT23BG2Vvutk37Yi13s5aLxx0zAACAZIoZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkW2QNEzWazcunSpXBGVGstnNFjjh4Z0zSFM2qtQ2T0MMpa5vN5OKOHHudYDz3O01EeL6M89ke5FvZ4vPRYS485ehyPUYxyTR7FKOd6D6PM0YO1cNai+3K/a8cYP2EBAABcYIoZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkW2QNETdNUbt++HcrYbDadpsk3TdMQGa21cEYPo8zR4xwbZS09jPKYG+Vc7zFHrXWIOXocjx4ZJycnQ8yxTUbZ223ieNytx3VslGNqLdvrLPfFHTMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRbZA0S11sqdO3dCGev1utM0MfP5PJxRaw1ntNbCGdukx/HYbDZDzNFDjzlGWctsFn9tapTj0SNjmqZwRo9zvYcea+Fuozxu2V7bdI5ZC98Id8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFtkDxDVWivTNGWPwZvUWsMZs1n8dYPNZhPOaK2FM3ocj22aY5S1jHI86G+U8xSA7XKWzw3umAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAMsUMAAAgmWIGAACQTDEDAABItsgeoIdaa/YIXfRYxygZ22SU42GOu40yB9urxznWWuswCQCjiD433O95wR0zAACAZIoZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkW2QNEzWazslwuQxnz+Tw8R601nDGbxXtyj7X0ME1T9gillD770kOPvd2mY7pN+9JaGyKjh1GuYz3s7u5mj7B1epwfo5zr22Sb9mWb1rJN7Mv5GeMZFAAA4AJTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQLJzK2a11t+utV6vtX7+Hl+vtdaP1VqfrbX+Va31O89rNgAAgEznecfsE6WUH7jP13+wlPL06Z8Pl1J+8xxmAgAASHduxay19iellJfv8y0/XEr5VHvdn5VSHq21vut8pgMAAMgz0t8xe6KU8qU3fPzc6ef+P7XWD9dan6m1PrPZbM5lOAAAgLMyUjF7aK2132qtfaC19oH5fJ49DgAAQMhIxez5Uso3veHjJ08/BwAAsNVGKmZ/WEr5idN3Z/zuUsrN1tqL2UMBAACctcV5/R/VWn+nlPK9pZR31FqfK6X8cillp5RSWmsfL6V8upTyQ6WUZ0spt0spP3leswEAAGQ6t2LWWvuxB3y9lVI+ck7jAAAADGOkX2UEAAC4kBQzAACAZOf2q4xnpdZalstlKKPHW+6//puYMYtFfDtGWUsPs9kYrxv0mKPHvvT4N/umaQpn9DgePeboYZvWMspjf5THbY/jUWsNZ4xyPR1Fj2NKf9u0L9u0lm2yTdfT6Frut44xnkEBAAAuMMUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSL7AGipmkqd+7cCWVsNptO08T0mGM2i3ftHnO01mR0Nsq+9DBNUzij1jrEHD0yeuhxfvRYyyjn2Gq1CmeMspZtMsox7XH9sJb+tmkt28S+3O0s1+KOGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBki+wBolpr5fj4OJSxXq/Dc9RawxmjmKYpnNFaC2f0OKajzNHDKPsySkYPPebosS89zGbx19m26XhsNpvsEbbOKI/bHqxlTNu0lm1iX86PO2YAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAki2yB4hqrZXNZpM9RmmthTOmaeowCb312NtRMrjbKMe01po9QjejHNMe19NR1gLAOM7yucEdMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFtkDRNVay3w+zx6j1FrDGT3W0WOOHhk99JijtTbEHKNk9GBf+htlLaNk9DCbxV93HOVcB2Ac0eeG+z0vuGMGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAINkie4CoWmtZLpehjMUifhhqreGM2Szek+fzeTijh9ZaOKPHWjabTTijx1pGOT96rKXHHD2OR4+19Hjs9zjHeuixlh7HdBT7+/vhjFHO01H0OB7AxeRa+P/c71i4YwYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAMsUMAAAg2SJ7gKj5fF4ODg5CGS+//HKnaWIWi/h2zOfzDpOMYTaLv25Qaw1ntNaGmGOz2YQzepwfPfZlmqZwRg891tJDj/Ojx1p6XIPW63U4o8fx6LGWHnOMYpRzrMf1FM7aKM/7o+ixlh7P+6NcP85yb8f4qQQAAOACU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASLbIHiBqmqZyeHgYythsNp2miWmtZY9QSillvV5nj1BKKWU2i79uME1Th0niaq3hjB7nR4/jsU37sk1rWSzil/PVahXOGOV4vPbaa+GMUa7JPYxy/RjlmI5yTe7BWu42ylp66LGWUY7pNu3LWT7PuWMGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAINkie4CoaZrK0dFRKGO9XneaJqbWGs5orYUzNptNOKOH2Sz+usE0TR0miZvP5+GMHnvbQ49j6hwbc44e+9Jjjh7nevR5oZRxrh+jGOUa1IO1jMla+htljm1ylsfUHTMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRbZA0S11spqtQpnbIvNZhPOGOV4TNMUzhhlLT3m6LG3tdZwxmwWfz1nlH0Z5RzrMcco+zJKxnq9DmcAwHlyxwwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAskX2AFHL5bI8/fTToYxnn3220zQxu7u7Q2RsNptwRmstnFFrDWdM0xTOmM3ir1/M5/NwRo996bGWHhnr9Tqc0UOPtfQ4x3qcHz0y7ty5E844Pj4OZ/S4fjz55JPhjL/+678OZ/R43PbQ43oKXEw9rh89rus9MnqIPt/e73nBHTMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQLLF/b5Ya/3YQ2Tcaq39Yqd5AAAALpz7FrNSyg+XUn7pAd/zr0opihkAAMA36EHF7Ndba5+83zfUWt/WcR4AAIAL575/x6y19m8eFPAw3wMAAMC9fcNv/lFrfdCvOAIAAPAQIu/K+NPdpgAAALjAHvSujLfu9aVSyn7/cf723vve95Y//uM/DmV88pP3/Wt0D+XatWvhjOeffz6ccXh4GM7YbDbhjMXiQX998cH29vbCGScnJ+GMWms4o8fxOD4+DmfM5/Nwxs7OTjijx1p67EuPtdy5cyec0VoLZyyXy3BGj/Pj4OAgnPHII4+EM77/+78/nPGhD30onPHCCy+EM3qc66Ncx3qc6z0yehyPHnNM0xTOmM3i//LRKHOMsi895uihx1p66HE8evxsOcrxuHLlSui/v3nz5j2/9qCr7CullA+21r785i/UWr8UmgoAAIBSyoN/lfFTpZRvucfX/mPnWQAAAC6k+94xu98/HN1a+4X+4wAAAFw8971jVmt9/EEBD/M9AAAA3NuDfpXx0w+R8TDfAwAAwD086M0//sGb3pmxllLamz6+1zs3AgAA8BDue8estTZvrV0tpTxTSvmx1tqV1trV08/97unHT5zLpAAAAFvqYf/Rib9bSvmXtdZfesPnvqv/OAAAABfPwxazV0op/6iU8nit9Y9qrfF//RMAAIBSysMXs9paW7fWfqaU8p9LKf+tlPJ3zm4sAACAi+NBb/7xNR//2v9orX2i1vq5UspHzmYkAACAi+Whillr7d+/6eP/UUr5p2cyEQAAwAXzsL/KCAAAwBlRzAAAAJIpZgAAAMkUMwAAgGQP+66Mw3r55ZfL7/3e74UyPvOZz4TnuHbt2hAZ6/U6nNFaC2fMZvHOv1wuwxk9jsc0TeGM+XwezthsNuGMHkZZS4/zdLGIXwJ7nGM99NiXWms449KlS+GMy5cvhzN67MuLL744xBw99NjbUZ5fgItplOvHrVu3Qv/9/X4GcscMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQLJF9gBRrbWyWq1CGbNZvJ/u7u6GM5bLZThjPp+HMzabTThjsYifWj2O6Sh6HI/oed5Lj7WcnJyEM3qc6z3W0uP60UOP49FDj+vY3t5eOKPH3gJ8o2qt4YzWWodJeCsZ4ycKAACAC0wxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACDZInuAqPl8Xq5evRrKWC6X4TkODg7CGScnJ+GMaZrCGev1OpzRWgtn7OzshDNWq1U4o4ce51iPfdlsNuGM+XwezuhxnvbQ43F7586dcEaPx/5sFn+dbbGIPyVcuXIlnBG9ppdSyhNPPBHOGEWtNXuEbnqspcfzyyhz9GAtdxtlLT2McjzM0XeO+/337pgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASLbIHiBqsViUt7/97aGMS5cuhedorYUzethsNuGM4+PjcMY0TeGMxSJ+eq7X63BGD5cvXw5n9NiXHufHfD4PZ/TYl52dnXDGlStXwhmHh4fhjB5728NsFn+t7uDgIJzxyCOPhDMee+yxcMYo5/ooaq3hjB7PlT3m6GGUOXqwlu3V43iM8tjvYfTzwx0zAACAZIoZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkW2QNErVar8uUvfzmU8dprr4XneOWVV8IZPebYbDbhjJOTk3BGD8vlMpxxfHwczlgs4g+TaZrCGUdHR0PM0eN49NiX3d3dcEaPY3rnzp1wRmstnDGfz8MZPc6PHnPs7OyEM1566aVwRo/jAfBW1+M5iofjjhkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIvsAaJWq1V54YUXQhkvvvhieI5XX301nHF4eBjO2Gw24YxpmsIZ8/k8nLFcLsMZ6/U6nNHD7u5uOOP4+Dic0WNvZ7P46zmr1Sqc0cPOzk44Y5vW0kOPx1yPc/369evhDLZXrTWc0VrrMAmMz+Plbj2Ox724YwYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAMsUMAAAg2SJ7gKhpmsrh4WEo4+joKDzH8fFxOOPk5CScMU3TEBk9tNbCGZvNpsMkcavVaoiMHns7m8Vfz1mv1+GMHkY5x2qt4YweehyPHudHj+vp7du3wxk91jKKUc6xUeboocdaejzmRpmjB2u52yhr6WGbjsdZPjdsz7MOAADAW5RiBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAECyRfYAUfP5vDz66KOhjEceeSQ8xzRN4YzNZhPOaK2FM3qsZblcDpExn8/DGT2Ox+7ubjhjFDs7O+GMO3fudJgkrsf50eNxO5vFXyNbLOKX8x5ruXTpUjijx2P/8uXL4Ywej33u1uM5qodaazhjlLWMMkcP1jKmHmvZpuNxls8N7pgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASLbIHiBquVyWp59+OpTxuc99LjzHwcFBOOPGjRvhjPV6Hc7YbDbhjPl8Hs64dOlSOOPo6CicMU1TOGOxiD/ULl++HM5orYUzeqzl5OQknNHjPN3Z2QlnrFarcEYPe3t74Yxaazijx+O2x/X0W7/1W8MZPR4vPTJ67EuPObbJKHvbwzadH9Zyt21ayzY5y31xxwwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAskX2AFHL5bI89dRToYzHH388PMfLL78czqi1hjNaa+GMo6OjcMbOzk44Y3d3d4iMzWYTzlgs4g+1k5OTcEaPfdnb2wtn9DjHtmlfelgul+GMHtePy5cvhzOuXr0aznjHO94RzuhxTaa/HuepvQVG5I4ZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSL7AGi1ut1+cpXvhLKuHHjRniOW7duhTNu3rwZzlitVkNk7OzshDP29vbCGYeHh+GMHsdjd3c3nHF8fBzOqLWGM/b398MZJycn4YwelstlOOPo6Cicsdlswhk9zrFpmsIZPdYym8VfM7x27Vo4o4cejzm21yjnxyhz0J+9fWtxxwwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAskX2AFFHR0flb/7mb0IZ165dC89x48aNcMZXv/rVcEYP0zSFM2azeOff3d0NZxwdHYUzVqtVOGM+n4cz1ut1OKPWGs7Y2dkJZ2w2m3BGj7Usl8twRo99GWVve5ynx8fH4YzXXnstnPGlL30pnMGYepzrPYwyB3fbpn0ZZS2jzNFayx6hlBJ/rrzfc747ZgAAAMkUMwAAgGSKGQAAQDLFDAAAINm5FLNa6/tqrX9aaz2utX70Pt/3VK31v9dan621/m6tNf7uDwAAAIM7rztmL5dSfq6U8msP+L5fKaX8emvtPaWUG6WUnzrrwQAAALKdSzFrrV1vrf1FKeWe7zteX38vzu8rpfz+6ac+WUr5kXMYDwAAINVIf8fs7aWUV1prX3tz/+dKKU98vW+stX641vpMrfWZHv/eDQAAQKaRitlDa639VmvtA621DxwcHGSPAwAAEHJmxazW+pFa62dP/7z7If6Tr5ZSHq21Lk4/frKU8vxZzQcAADCKMytmrbXfaK19x+mfFx7i+1sp5TOllB89/dSHSil/cFbzAQAAjOK83i7/8Vrrc6WUny+l/GKt9bla69XTr336DXfUfqGU8vO11mfL63/n7D+cx3wAAACZFg/+lrjW2rXy+q8mfr2v/dAb/vf/KqX8w/OYCQAAYBRvyTf/AAAA2CaKGQAAQDLFDAAAINm5/B2zs7TZbMqrr74ayoj+96WUcvv27XDGer1+8Dc9wOtvbpk/R601nDFNUzjj+Pg4nNHjmI6yLz3m2Gw24Yweezufz8MZs1n8take51iP49FjLavVKu8r7YEAAA0xSURBVJzR47G/WMSfmm7evBnO6HGO9TimPfTYlx4ZPa5BPVjL3aylv1HW4rH/1uKOGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBki+wBomazWdnb2wtlXLlyJTzHZrMJZ0zTNETGyclJOKOH+XyePUI3s1n8NZD1et1hkrge+9JjLT3mWC6X4Yxaazijx/VjlMfLwcFBOCN6Te+V0VoLZ4yix1p6nOv05zwd0yhrGWWObdLjZ+17cccMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQLJF9gBRy+WyPPXUU6GMd77zneE59vb2whn7+/vhjGmawhnHx8dDZNRawxk9jsdsFn/9osf50WMtrbVwxnK5DGecnJyEM9brdThjsYhfAnvMsdlswhm7u7vhjB6PuStXroQzDg4Owhnve9/7whk9HnPbpMf1YxSjrKXHHD0et6McD2sZU49jOsq+9HCWa3HHDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAECyRfYAUTs7O+Vd73pXKOOxxx4LzzGfz8MZs9kYPfnVV18NZyyXy3BGj2O6Xq/DGTs7O+GMy5cvhzNWq1U4o9Yaztjf3w9nHB8fhzNu374dzuhxnvaYY7GIX4p7nKc95jg4OAhnXLp0KZzxtre9LZwB99Nayx4B2DJjNAEAAIALTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAINkie4Co1WpVXnjhhVDGSy+9FJ7jxo0b4YybN2+GMzabTTjj6OhoiDl2dnbCGcfHx0PMcXh4GM7osZZaazhjf38/nHH79u1wRmstnLFYxC+BPdbSY47d3d1wxjRN4YxHH300nHHlypVwxhe/+MVwBtxPj+vpNhnleIwyB3wj3DEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkGyRPUDUnTt3yuc///lQxhe+8IXwHDdv3gxnvPbaa+GM1lo4Y71ehzN6WCzip+dmswln9Dims1n8NZAec/SwTfsyn8/DGaM8XnqcY7XWcMYrr7wSztjb2wtnPP744+GMHufHarUKZ/TQY297ZIxyHbOWMdmXu23TWnoY5XhEnxvu93ODO2YAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAki2yB4harVbl+vXroYxbt26F53j11VfDGUdHR+GM1lo4Y5qmcEatNZzRYy2r1WqIOWaz+Gsgo+xLj2PaYy09jqlzrP8cPfa2R8aNGzfCGT0eLz0yRrFNa+lhlOMxyhw9bNNaehjleIzyM902zXEv7pgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASLbIHiBqPp+XRx99NJRx5cqV8ByttXDGfD4PZ6zX63DGZrMJZ8xm8c7f43j0mKOHHnP02Jdaazijx75M0xTO6HFMF4v4JbDHHD32pcccPfZlb28vnHHp0qVwxiOPPBLO6HE8ejw3jKLHWrbpeGyTUfZllDnob5v2tsfPY/cyxk+tAAAAF5hiBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAECyRfYAUfv7++Xbvu3bQhlf+MIXwnMcHh6GM1566aVwxnq9DmdsNptwRmstnFFrDWeMspadnZ1wxjRN4YweFov4ZaPHWmaz+OtKe3t74YzVahXOODk5CWfM5/MhMi5duhTOuHLlSjjj/e9/fzijx/W0x/Wjhx7X01GuQdxtlHOM7TXKOTbKHNFr4f3W4Y4ZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAEAyxQwAACCZYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSL7AGi9vb2ynvf+95Qxjd/8zeH53jllVfCGcvlMpyx2WzCGUdHR+GM1WoVztjf3w9nHB8fhzN6HNNLly6FM05OTsIZPfRYS499qbWGM3qcY7dv3w5ntNbCGYtF/HI+m8Vfq+txfly9ejWc8e53vzuc0WNfRtFjLT0ec9xtlH0Z5Vy3lruNcn70MMq+9HCWa3HHDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAMsUMAAAgmWIGAACQTDEDAABIppgBAAAkU8wAAACSKWYAAADJFDMAAIBkihkAAECyRfYAUfv7++Xbv/3bs8co169fD2dcu3YtnHF0dBTOOD4+DmfMZvHOP5/Pwxk91lJrDWfs7u6GM9brdTijxzFdLpfhjNVqFc7Y2dkZIuPw8DCc0WNvRzlPH3vssXDGlStXwhkf/OAHwxlXr14NZ9y6dSuc0WNvR7kmbzabcEaPtfQwTVM4Y5vW0kOP42Et/efoocdaWmtDZESfG27evHnPr42xWwAAABeYYgYAAJBMMQMAAEimmAEAACRTzAAAAJIpZgAAAMkUMwAAgGSKGQAAQDLFDAAAIJliBgAAkEwxAwAASKaYAQAAJFPMAAAAkilmAAAAyRQzAACAZIoZAABAstpay54hpNb6lVLKF7PngC3xjlLKS9lDALB1PL/A676ltfbOr/eFt3wxA/qptT7TWvtA9hwAbBfPL/BgfpURAAAgmWIGAACQTDED3ui3sgcAYCt5foEH8HfMAAAAkrljBgAAkEwxAwAASKaYwQVUa31frfVPa63HtdaP3uf7nqq1/vda67O11t+tte6e55wAvHXUWn+71nq91vr5e3y91lo/dvqc8le11u887xlhZIoZXEwvl1J+rpTyaw/4vl8ppfx6a+09pZQbpZSfOuvBAHjL+kQp5Qfu8/UfLKU8ffrnw6WU3zyHmeAtQzGDC6i1dr219hellNW9vqfWWksp31dK+f3TT32ylPIj5zAeAG9BrbU/Ka+/8HcvP1xK+VR73Z+VUh6ttb7rfKaD8SlmwL28vZTySmttffrxc6WUJxLnAeCt7YlSypfe8LHnFXgDxQwAACCZYgYXRK31I7XWz57+efdD/CdfLa//msni9OMnSynPn92EAGy550sp3/SGjz2vwBsoZnBBtNZ+o7X2Had/XniI72+llM+UUn709FMfKqX8wVnOCMBW+8NSyk+cvjvjd5dSbrbWXsweCkZRX//ZC7hIaq2Pl1KeKaVcLaVMpZTXSil/v7V2q9b66VLKT7fWXqi1/r1Syn8qpTxWSvmfpZQfb60dZ80NwLhqrb9TSvneUso7SilfLqX8cillp5RSWmsfP31TqX9XXn/nxtullJ9srT2TMy2MRzEDAABI5lcZAQAAkilmAAAAyRQzAACAZIoZAABAMsUMAAAgmWIGAACQTDED4MKrtW5qrZ+ttb779OPvqrV+rtb6bK31Y6f//lKptf5qrfVarfWjuRMDsG0UMwAo5U5r7Ttaay+cfvybpZR/Vkp5+vTPD5RSSmvtX5RSPp4zIgDbTDED4EKptf7z07tjn621/u9a62fe9PV3lVKuttb+rLXWSimfKqX8SMqwAFwYihkAF0pr7eOtte8opXywlPJcKeVfv+lbnjj9/Nc8d/o5ADgzihkAF9W/LaX819baH2UPAgCL7AEA4LzVWv9JKeVbSik/+3W+/Hwp5ck3fPzk6ecA4My4YwbAhVJr/a5SykdLKT/eWpve/PXW2oullFu11u8+fTfGnyil/ME5jwnABeOOGQAXzc+WUh4rpXzm9F3wn/k63/MzpZRPlFL2Syn/5fQPAJwZxQyAC6W19pNv/lyt9R+/6XueKaW8/9yGAuDC86uMAPD6ry7+339g+l5qrb9aSvnxUsrh+YwFwEVRX/8nWgAAAMjijhkAAEAyxQwAACCZYgYAAJBMMQMAAEj2fwAbJzkABF6j4gAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 1080x1080 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[""],"metadata":{"id":"6P62rdZ7CTra"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"qrXlIfOuCTuY"},"execution_count":null,"outputs":[]}]}